The ``2-matrix_divided`` module
===============================

Using ``matrix_divided``
------------------------

Import ``matrix_divided`` from 2-matrix_divided`` module

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

check for list of lists of integers and floats

    >>> matrix_divided([], 7)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    >>> matrix_divided([[]], 7)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    >>> matrix_divided([[1,2,3]], 7)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    >>> matrix_divided([[1,2,3], [2, 'school', 4]], 8)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    >>> matrix_divided(['bag', [3,4,5], (8,5,6)], 15)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

check for the size of lists in matrix

    >>> matrix_divided([[1,2,3], [1,2,3,4], [3,4,5,6,7,8]], 9)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

check for type of div

    >>> matrix_divided([[1,2,3], [1,2,4]], '78')
    Traceback (most recent call last):
    TypeError: div must be a number

check for zero divisor

    >>> matrix_divided([[1,2,3], [1,2,4]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

check if func returns new list

    >>> matrix = [[1,2,3], [4,5,6]]
    >>> new_matrix = matrix_divided(matrix, 3)
    >>> print(new_matrix)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]
