The ``101-lazy_matrix_mul`` module
==================================

Using ``lazy_matrix_mul``
-------------------------

Import ``lazy_matrix_mul`` from ``101-lazy_matrix_mul`` module

    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Working with normal edge cases

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    array([[ 7, 10],
           [15, 22]])
    >>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
    array([[13, 16]])

Working with empty list

    >>> lazy_matrix_mul([], [[1, 2, 3], [4, 5, 6]])
    Traceback (most recent call last):
    ValueError: shapes (0,) and (2,3) not aligned: 0 (dim 0) != 2 (dim 0)

Working with only one argument

    >>> lazy_matrix_mul([[1, 2], [3, 4]])
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'
    >>> lazy_matrix_mul([[1, 2], [3, 4]])
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

Working with two empty list

    >>> lazy_matrix_mul([], [])
    0.0

Working with matrices that are not list of lists
    >>> lazy_matrix_mul([3, 4, 5], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ValueError: shapes (3,) and (2,2) not aligned: 3 (dim 0) != 2 (dim 0)

Working with values in lists that are not int or float

    >>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, '6']])
    Traceback (most recent call last):
    TypeError: invalid data type for einsum
    >>> lazy_matrix_mul([[1, 2]], [[3, (3, 4)], [5, 6]])
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

Working with arguments of non equal width

    >>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6, 8]])
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.
    >>> lazy_matrix_mul([[1, 2, 4, 8]], [[3, 4], [5, 6, 8]])
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

Working with floats

    >>> lazy_matrix_mul([[1.3, 2.5]], [[3.8, 4.1], [5.5, 66.9]])
    array([[ 18.69, 172.58]])
